https://github.com/arindamslt/AECTRAININGJULY2024BATCH1.git
DATE:08.07.2024
==================================================================
FULL STACK DEVELOOMENT
===================================================
BACKEND
FROND END
DATABASE
MAVEN
==================================================
MAVEN IS A BUILD TOOL.
PURPOSE
=========================================
TO AUTOMATE PROJECT BUILDING PROCESS
========================================================
PROJECT BUILDING PROCESS
===============================================
1.DOWNLOAD LIBRARIES/JAR FILES
2.COMPILE THE SOURCE CODE
3.EXECUTE THE TEST CASES
4.PACKAGE THE APPLICATION INTO JAR  FILES OR WAR FILES

SET UP MAVEN
==============================================
1.COMMAND PROMPT
2.IDE===STS,ECLIPSE,INTELLIJ
==========================================================
TERMINOLOGY
===========================================================
ARCHIETYPE====TYPES OF PROJECT ===QUICKSTART,WEB
GROUPID====ORGANISATION NAME===com.aec
ARTIFACTID===NAME OF THE PROJECT
VERSION===SNAPSHOT  RELAEASE
SNAPSHOT===UNDER DEVELOPING
DEPENDENCY====LIBRARIES OR JAR FILES
REPOSITORY===LOCATION WHERE THE JAR FILES ARE STORED
 THREE TYPES
==============================
1.LOCAL===IT IS YOUR HDD
2.CENTRAL====WEB/CLOUD
3.REMOTE====IT IS THE COMPANY'S SERVER
GOAL====PROCESS OF BUILDING THE PROJECT
=================================================
1.CLEAN
2.COMPILE
3.TEST
4.PACKAGE
======================================================
pom.xml
============================================
IT IS CALLED THE HEART OF THE PROJECT
pom===PROJECT OBJECT M ODEL
PURPOSE
===========================
1.DEPENDENCY MANAGEMENT
2.PLUG IN
3.PROJECT MANAGEMENT
4.PACKAGING
TRANSITIVE DEPENDENCY
================================
PRACTICAL
===================================================
CREATE A NEW  MAVEN PROJECT
===ADD  SPRING CONTEXT DEPENDENCY
====CREATE THE JAR FILES

THEN ADD LOMBOK DEPENDENCY
CLEAN IT AND CREATE THE NEW JAR FILES
==========================================================
LOMBOK INSTALLATION
============================================================
C:\Users\arins\.m2\repository\org\projectlombok\lombok
=====================================================================================
SPRING
======================================================================================
TYPES OF APPLICATION
======================================================================
DESKTOP APPLICATION=====CORE JAVA,AWT,SWING,SPRING          ====.JAR FILE
WEB APPLICATION=========SERVLET,JSP,TOMCAT,SPRING            =====.WAR FILE
ENTERPRISE APPLICATION====EJB,SPRING                         =====.EAR FILE(JAR+WAR)

SPRING
=========================================================================
SPRING IS AN OPEN SOURCE LIGHT WEIGHT DEPENDENCY INJECTION BASED FRAMEWORK SOFTWARE
TO  DEVELOP JAVA/JEE BASED ENTERPRISE APPLICATION
HEAVY WEIGHT 
====================================

.java=====compiler====.class====CONTAINER====.java===.class==O/P
LIGHT WEIGHT
==================
.java===compiler===.class===container===.class===O/P
LIGHT WEIGHT APPLICATION
=====================================================
POJO CLASS
POJO
========================
PLAIN OLD JAVA OBJECT
GETTER()
SETTER()
CONSTRUCTOR()
PARAMETERISED CONSTRUCTOR()

2.USE XML FILE/ANNOTATION
FRAMEWORK
================================================================================
TECHNOLOGIES
DBMS===JDBC API
MAILING===JAVA MAIL
MESSAGING===JMS/KAFKA

DESIGN PATTERN
==============================================================
WELL APPROVED SOLUTION
FRAMEWORK===TECHNPLOGIES+DESIGN PATTERN
FRAMEWORK====IN BUILD CLASSES AND INTERFACES AND DESIGN PATTERN
PURPOSE
=================================
RAD===RAPID APPLICATION DEVELOPMENT
FEATURES OF THE SPRING
===========================================
1.IT IS USED FOR WEB/DISTRIBUTED APPLICATION
2.IT SUPPORT CONTAINER SYSTEM
1.SCAN THE CLASSES(SPRING BEAN)
2.CREATE THE OBJECT
3.PROVIDE THE DATA
4.LINKING BETWEEN THE OBJECT

ROLE OF DEVELOPER
=======================


DEPENDENCY
=========================================================================

class Test
{
  private String id;//instance variable
  private String name;
public void add()
{
   int a;//local variable
}
}
THE INSTANCE VARIBALE IN CASE OF SPRING BEAN ARE CALLED DEPENDENCY
TYPES OF DEPENDENCY
=====================
PRIMITIVE TYPE===int,float,double,char,bytes
COLLECTION TYPE==List,Set,Map,Properties
REFERENCE TYPE===OBJECT VARIABLE
INJECTION
===========================
PROVIDE/UPDATE DATA TO THE DEPENDENCY CALLED DEPENDENCY INJECTION
TYPES OF DEPENDENCY INJECTION
===================================
1.SETTER INJECTION
2.METHOD INJECTION
3.CONSTRUCTOR INJECTION
4.LOOK UP METHOD INJECTION
5.INTERFACE INJECTION
========================================================
MODULES IN SPRING
==============================
1.SPRING CORE
2.SPRING DAO
3.SPRING ORM
4.SPRING AOP
5.SPRING CONTEXT
6.SPRING WEB====  SPRING WEB MVC
7.SPRING MVC===
SPRING CORE
========================================
THE RULES AND GUIDELINES GIVEN BY SPRING FRAMEWORK
SPRING BEAN===CLASS+RULES GIVEN BY SPRING CORE
===============================================
RULES
==========================================================
1.CLASS SHOULD BE PUBLIC
2.DEPENDENCY ARE PRIVATE
3.GETTER()
4.SETTER()
5.CONSTRUCTOR()
6.PARAMETERISED CONSTRUCTOR
7.toString()
8.equals()
9.hashCode()
ANNOTATION
===================================
1.STEREO TYPE OF ANNOTATION
@Component============CREATE THE OBJECT IN THE SPRING CONTAINER
2.BASIC ANNOTATION
@ComponentScan=========SCAN THE BASE PACKAGES
@Value=================ASSING DATA TO THE DEPENDENCY
@propertySource=====ACCESSING DATA FROM PROPERTIES FILE
LOMBOK
====================================
@Data===getter(),setter(),toString()
@NoArgsConstructor
@AllArgsConstructor

DATE:09.07.2024
====================================================================================
PREREQUISITE:DBMS,RDBMS
DBMS
========================================================================
DATABASE MANAGEMENT SYSTEM
DATABASE:COLLECTION OF TABLES OR INTERRELATED DATA

DBMS==DATABASE+SQL
SQL==STRUCTURED QUERY LANGUGAE
ADVANTAGE OF DBMS
============================
1.DATA REDUNDENCY MINIMIZED
2.SECURITY RESTRICTION IS THERE
3.DATA CAN BE SHARED
4.INTRIGRITY CONSTRAINT

RDBMS SOFTWARE
=======================
MYSQL,ORACLE,SYBASE,SQLSERVER,POSTGRESQL

SQL==4TH GENERATION LANGUAGE
   ===NON PROCEDURAL LANGUAGE
3RD GEN===HOW PART,WHAT PART
4TH GEN==HOW PART IS NOT KNOWN TO US
         ONLY WHAT PART IS KNOWN TO US
SQL COMMAND
==============================================================
DDL==DATA DEFINATION LANGUAGE
==============================
CREATE,ALTER,RENAME,DROP,TRUNCATE
DML==DATA MANIPULATION LANGUAGE
=======================================
INSERT,UPDATE,DELETE,MERGE
DATA RETRIEVAL
=============================
SELECT
TCL==TRANSACTION CONTROL LANGUAGE
==============================================
COMMIT,ROLLBACK,SAVEPOINT
DCL==DATA CONTROL LANGUAGE
======================================
GRANT,REVOKE
LOGIN IN MYSQL
=====================
1.COMMAND PROMPT
2.MYSQL COMMANDLINE CLIENT
3.MYSQL WORKBENCH
DATA TYPES IN MYSQL
=======================
VARCHAR=-==ALPHANUMERIC
CHAR
NUMBER
DECIMAL
DATE
TIMESTAMP
=======================================================
CONSTRAINT
==================================================
BEFORE INSERTING ANY ROW OF A TABLE YOU HAVE TO SATISFY CERTAIN RULES AND REGULATIONS CALLED CONSTRAINT
TYPES OF CONSTRAINT
============================================
PRIMARY KEY===DOESN'T ALLOW DUPLICATE VALUE AS WELL AS NULL VALUE
NOT  NULL=== IT CAN'T ACCEPT NULL VALUE
UNIQUE KEY==DOESN'T ACCEPT DUPLICATE VALUE BUT ACCEPT NULL VALUE
CHECK CONSTRAINTS
FOREIGN KEY===IT WILL SUPPORT OTHER TABLE PRIMARY KEY VALUE ONLY

Enter password: *******
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 264
Server version: 8.0.35 MySQL Community Server - GPL

Copyright (c) 2000, 2023, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| abs                |
| aec                |
| aiem               |
| aiem1              |
| bootdb             |
| bootreact          |
| dbs                |
| fdapps             |
| foodapp            |
| foodapps           |
| fooddb             |
| hbdb               |
| hbdbs              |
| information_schema |
| mysql              |
| performance_schema |
| restdb             |
| sys                |
| test               |
| testdb             |
| testing            |
+--------------------+
21 rows in set (0.02 sec)

mysql> CREATE DATABASE TST;
Query OK, 1 row affected (0.01 sec)

mysql> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| abs                |
| aec                |
| aiem               |
| aiem1              |
| bootdb             |
| bootreact          |
| dbs                |
| fdapps             |
| foodapp            |
| foodapps           |
| fooddb             |
| hbdb               |
| hbdbs              |
| information_schema |
| mysql              |
| performance_schema |
| restdb             |
| sys                |
| test               |
| testdb             |
| testing            |
| tst                |
+--------------------+
22 rows in set (0.00 sec)

mysql> USE TST;
Database changed
mysql> SHOW TABLES;
Empty set (0.00 sec)

mysql> CREATE TABLE TEST
    -> (TID VARCHAR(10),
    ->  TNAME VARCHAR(25));
Query OK, 0 rows affected (0.04 sec)

mysql> SHOW TABLES;
+---------------+
| Tables_in_tst |
+---------------+
| test          |
+---------------+
1 row in set (0.00 sec)

mysql> CREATE TABLE DEPT
     (DEPTNO VARCHAR(10) PRIMARY KEY,
      DNAME  VARCHAR(25) NOT NULL,
      LOC    VARCHAR(25) NOT NULL
     );

INSERT INTO DEPT VALUES('D1','MKTG','KOLKATA');

mysql> SELECT * FROM DEPT;
+--------+-------+---------+
| DEPTNO | DNAME | LOC     |
+--------+-------+---------+
| D1     | MKTG  | KOLKATA |
+--------+-------+---------+
1 row in set (0.00 sec)

mysql> INSERT INTO DEPT VALUES('D1','MKTG','KOLKATA');
ERROR 1062 (23000): Duplicate entry 'D1' for key 'dept.PRIMARY'
INSERT INTO DEPT VALUES('D2',NULL,'CHENNAI');

CREATE TABLE STUDENT
(ROLLNO  VARCHAR(10),
 SNAME   VARCHAR(25) NOT NULL,
 SPHNO   VARCHAR(10) NOT NULL,
 DEPTNO  VARCHAR(10),
 CONSTRAINT STUDENT_ROLLNO_PK PRIMARY KEY(ROLLNO),
 CONSTRAINT STUDENT_DEPTNO_FK FOREIGN KEY(DEPTNO) REFERENCES DEPT(DEPTNO)
);
mysql> DESC STUDENT;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| ROLLNO | varchar(10) | NO   | PRI | NULL    |       |
| SNAME  | varchar(25) | NO   |     | NULL    |       |
| SPHNO  | varchar(10) | NO   |     | NULL    |       |
| DEPTNO | varchar(10) | YES  | MUL | NULL    |       |
+--------+-------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> INSERT INTO STUDENT VALUES('1','SUMAN','34434','D1');
Query OK, 1 row affected (0.02 sec)

mysql> SELECT * FROM STUDENT;
+--------+-------+-------+--------+
| ROLLNO | SNAME | SPHNO | DEPTNO |
+--------+-------+-------+--------+
| 1      | SUMAN | 34434 | D1     |
+--------+-------+-------+--------+
1 row in set (0.00 sec)
 
INSERT INTO STUDENT VALUES('2','JAYANTA','7666','D3');
mysql> DESC STUDENT;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| ROLLNO | varchar(10) | NO   | PRI | NULL    |       |
| SNAME  | varchar(25) | NO   |     | NULL    |       |
| SPHNO  | varchar(10) | NO   |     | NULL    |       |
| DEPTNO | varchar(10) | YES  | MUL | NULL    |       |
+--------+-------------+------+-----+---------+-------+
4 rows in set (0.00 sec)

mysql> INSERT INTO STUDENT VALUES('2','SUMAN','34434','D3');
ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`tst`.`student`, CONSTRAINT `STUDENT_DEPTNO_FK` FOREIGN KEY (`DEPTNO`) REFERENCES `dept` (`DEPTNO`))

mysql> CREATE TABLE EMP
    -> (EID VARCHAR(10)  PRIMARY KEY,
    ->  ENAME VARCHAR(25) NOT NULL,
    ->  EDESIG  VARCHAR(25) NOT NULL,
    ->  SAL     DECIMAL,
    ->  DNAME   VARCHAR(25)
    -> );
Query OK, 0 rows affected (0.01 sec)

mysql> INSERT INTO EMP VALUES('E1','ARUP','CLERK',25000,'MKTG');
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO EMP VALUES('E2','SUMAN','MANAGER',50000,'MKTG');
Query OK, 1 row affected (0.03 sec)

mysql> INSERT INTO EMP VALUES('E3','RAJAT','MANAGER',60000,'FINANCE');
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO EMP VALUES('E4','ALOKE','ANALYST',40000,'FINANCE');
Query OK, 1 row affected (0.00 sec)

mysql> SELECT * FROM EMP;
+-----+-------+---------+-------+---------+
| EID | ENAME | EDESIG  | SAL   | DNAME   |
+-----+-------+---------+-------+---------+
| E1  | ARUP  | CLERK   | 25000 | MKTG    |
| E2  | SUMAN | MANAGER | 50000 | MKTG    |
| E3  | RAJAT | MANAGER | 60000 | FINANCE |
| E4  | ALOKE | ANALYST | 40000 | FINANCE |
+-----+-------+---------+-------+---------+
4 rows in set (0.00 sec)
RESTRICTION OF DATA
================================
IT IS DONE BY WHERE CLAUSE
mysql> SELECT * FROM EMP WHERE EDESIG='MANAGER';
+-----+-------+---------+-------+---------+
| EID | ENAME | EDESIG  | SAL   | DNAME   |
+-----+-------+---------+-------+---------+
| E2  | SUMAN | MANAGER | 50000 | MKTG    |
| E3  | RAJAT | MANAGER | 60000 | FINANCE |
+-----+-------+---------+-------+---------+
2 rows in set (0.00 sec)

mysql> SELECT * FROM EMP WHERE EDESIG IN('MANAGER','ANALYST');
+-----+-------+---------+-------+---------+
| EID | ENAME | EDESIG  | SAL   | DNAME   |
+-----+-------+---------+-------+---------+
| E2  | SUMAN | MANAGER | 50000 | MKTG    |
| E3  | RAJAT | MANAGER | 60000 | FINANCE |
| E4  | ALOKE | ANALYST | 40000 | FINANCE |
+-----+-------+---------+-------+---------+
3 rows in set (0.00 sec)
IN OPERATOR
=======================================
SELECT * FROM EMP WHERE EDESIG IN('MANAGER','ANALYST');

mysql> SELECT * FROM EMP WHERE EDESIG NOT IN('MANAGER','ANALYST');
+-----+-------+--------+-------+-------+
| EID | ENAME | EDESIG | SAL   | DNAME |
+-----+-------+--------+-------+-------+
| E1  | ARUP  | CLERK  | 25000 | MKTG  |
+-----+-------+--------+-------+-------+
1 row in set (0.00 sec)
AND OPERATOR
=================================================================
SELECT * FROM EMP WHERE EDESIG='MANAGER' AND SAL > 50000;
mysql> SELECT * FROM EMP WHERE EDESIG='MANAGER' AND SAL > 50000;
+-----+-------+---------+-------+---------+
| EID | ENAME | EDESIG  | SAL   | DNAME   |
+-----+-------+---------+-------+---------+
| E3  | RAJAT | MANAGER | 60000 | FINANCE |
+-----+-------+---------+-------+---------+
1 row in set (0.00 sec)
mysql> SELECT * FROM EMP WHERE EDESIG='MANAGER' OR SAL > 50000;;
+-----+-------+---------+-------+---------+
| EID | ENAME | EDESIG  | SAL   | DNAME   |
+-----+-------+---------+-------+---------+
| E2  | SUMAN | MANAGER | 50000 | MKTG    |
| E3  | RAJAT | MANAGER | 60000 | FINANCE |
+-----+-------+---------+-------+---------+
2 rows in set (0.00 sec)

LIKE OPERATOR
===================================================================
SELECT * FROM EM P WHERE ENAME LIKE 'A%';
SELECT * FROM EM P WHERE ENAME LIKE '_R%';
mysql> SELECT * FROM EMP WHERE ENAME LIKE '_R%';
+-----+-------+--------+-------+-------+
| EID | ENAME | EDESIG | SAL   | DNAME |
+-----+-------+--------+-------+-------+
| E1  | ARUP  | CLERK  | 25000 | MKTG  |
+-----+-------+--------+-------+-------+
1 row in set (0.00 sec)

mysql> SELECT * FROM EMP WHERE ENAME LIKE '%E';
+-----+-------+---------+-------+---------+
| EID | ENAME | EDESIG  | SAL   | DNAME   |
+-----+-------+---------+-------+---------+
| E4  | ALOKE | ANALYST | 40000 | FINANCE |
+-----+-------+---------+-------+---------+
1 row in set (0.00 sec)

mysql> SELECT * FROM EMP WHERE ENAME LIKE '%A%';
+-----+-------+---------+-------+---------+
| EID | ENAME | EDESIG  | SAL   | DNAME   |
+-----+-------+---------+-------+---------+
| E1  | ARUP  | CLERK   | 25000 | MKTG    |
| E2  | SUMAN | MANAGER | 50000 | MKTG    |
| E3  | RAJAT | MANAGER | 60000 | FINANCE |
| E4  | ALOKE | ANALYST | 40000 | FINANCE |
+-----+-------+---------+-------+---------+
4 rows in set (0.00 sec)

DML COMMANDS
======================================================================================
DELETE RECORDS
====================================================================================
DELETE FROM EMP WHERE  EID='E4';
UPDATE DATA
======================================================================
UPDATE EMP SET ENAME='RAJATAVA',EDESIG='ANALYST',SAL=45000,DNAME='HR' WHERE EID='E3';
COMMIT;
HOW TO CREATE DUPLICATE TABLE
================================================================================
CREATE TABLE EMP1 AS SELECT * FROM EMP;
CREATE A DUPLICATE TABLE WITHOUT DATA
================================================================
CREATE TABLE EMP2 AS SELECT * FROM EMP  WHERE 1=2;

HIBERNATE
==============================================================================
ORM
=============================
HIBERNATE WITH JPA(JAVA PERSISTANCE API)
=========================================
1.MAVEN PROJECT
2.DEPENDENCY ADDED
 LOMBOK
 MYSQL
 HIBERNATE
3.PERSISTENCE.XML===JDBC CONFIGUARTION WILL BE THERE
SRC===MAIN==RESOURCES
 META-INF FOLDER===PERSISTENCE.XML

mysql> CREATE DATABASE HBSDB;

 <persistence-unit name="AppDB">
        <properties>
            <property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver" />
            <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/hbsdb" />
            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="arindam" />
            <property name="hibernate.show_sql" value="true" />
            <property name="hibernate.hbm2ddl.auto" value="update" />
            <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL8Dialect" />
        </properties>
    </persistence-unit>
     
</persistence>

EntityTransaction tx=null;
//READING THE JDBC CONFIGURATION FROM PERSISTANCE.XML FILE
EntityManagerFactory emf=Persistence.createEntityManagerFactory("AppDB");
//CREATE TABLE UPDATE TABLE
EntityManager em=emf.createEntityManager();
//TRANSACTION CREATED
tx=em.getTransaction();
//BEGIN THE TRANSACTION
tx.begin();
Customer cs1=new Customer("C1","ANUP","54545");
//INSERT DATA AND CREATE THE TABLE
em.persist(cs1);
//SAVE THE DATA
tx.commit();
//close the connection
emf.close();

CLASS:EMPLOYEE
TABLE:EMPLOYEE_MASTER
EID==NUMBER===PRIMARY KEY===10===AUTO GENERATED
ENAME===NOT NULL==25
ESEDIG==COLUMN NAME DESIG===25
SAL====DECIMAL
JOINDT====DATE
WORKHR===DATE AND TIME
EMAIL
RELATIONSHIP
===================
ONE TO ONE
ONE TO MANY
MANY TO ONE
MANY TO MANY
EQUI JOIN
=================================================
BOTH THE TABLES COMMON DATA

mysql> SELECT C.CANDID,C.CANDNM,A.ADHARNO,A.CITY
    -> FROM CANDIDATE C,ADHAR A
    -> WHERE C.ADHAR_NO=A.ADHARNO;
+--------+--------+---------+---------+
| CANDID | CANDNM | ADHARNO | CITY    |
+--------+--------+---------+---------+
| C2     | ANUP   | 343434  | DELHI   |
| C1     | RUPAM  | 656565  | KOLKATA |
+--------+--------+---------+---------+
2 rows in set (0.00 sec)
====================================================
@Entity====TABLE NAME
@Table===WHEN TABLE IS NOT CLASS NAME
@Column====CHANGE THE COLUMN NAME AND MODIFY THE LENGTH OF THE COLUMN
@Temporal====FOR DEALING WITH DATE AND DATE TIME
@Id=========Primay Key
@GeneratedValue====AUTO INCREMENT OF THE COLUMN
EntityManagerFactory====READING THE PERSISTENCE.XML FILE
EntityManager===========CREATE,UPDATE,DELETE OPRATION OF TABLE
EntityTransaction==========FOR COMMIT ROLLBACK OPERATION
pesistant()================SAVING DATA TO THE TABLE
===================================================================================================

DATE:10.07.2024
====================================================================================
CRUD OPERATION 
===============================================================================
INSERT,UPDATE,DELETE,FETCH
HibernateCrudOprn
FETCHING DATA USING HIBERNATE
=======================================================
1.JPQL===JAVA PERSISTENCE QUERY LANGUAGE===IT KNOWS CLASS ONLY
    select p from Product p;

2.HQL===HIBERNATE QUERY LANGUAGE==========IT KNOWS CLASS ONLY
  from Product
3.NATIVE SQL===NORMAL SQL=================IT KNOWS TABLE ONLY
select * from product;

LIMITATION OF SPRING
=================================================================================
1.WE NEED USE LOT OF DEPENDENCIES WITH COMPATABLE VERSION
2.WE HAVE TO CONFIGURE LOT OF THINGS
3.APPLICATON TO BE DEPLOYED IN EXTERNAL SERVER
EX:TOMCAT,JBOSS,WEBLOGIC,WEBSPHERE
SPRING BOOT
=========================================================================================
SPRING BOOT IS AN ARCHIETECTURAL STYLE WHICH IS WORK ON TOP OF THE SPRING
ADVANTAGE
==========================================
1.STARTER DEPENDENCY
===========================================
RELATED JAR FILES OF DIFFERENT GROUP TOGETHER INTO SINGLE UNIT
SPRING BOOT STARTER DEPENDENDENCY
SPRING BOOT STARTER WEB
2.AUTOCONFIGURATION
===========================================================
BY DEFAULT AUTO CONFIGURATION IS DISABLED
@EnableAutoConfiguration
3.EMBEDDED SERVER
PURPOSE
=====================
RAPID APPLICATION DEVELOPMENT
SPRING BOOT PROJECT
=================================
1.MAVEN
2.SPRING INITIALIZER
3.SPRING BOOT STARTER

@SpringBootApplication
=================================================================
@EnableAutoConfiguration
@ComponentSacn
@Configuration
WHY YML IS BETTER
==========================================================================
1.NO INDEX DUPLICATION TOOK PLACE
2.IT IS MORE READABLE THAN PROPERTIES FILES
==========================================================================
SPRING BOOT JDBC 
===========================================================================
TABLE:ACCOUNT
=============================================
FIELDS     DATA TYPE     SIZE         CONSTRAINTS
=====================================================
ACCNO       VARCHAR       10          PRIMARY KEY
CNAME       VARCHAR       25          NOT NULL
BALANCE     DECIMAL
=================================================================

CREATE TABLE ACCOUNT
(ACCNO  VARCHAR(10) PRIMARY KEY,
 CNAME  VARCHAR(25) NOT NULL,
 BALANCE  DECIMAL);
LOMBOK
MYSQL
JDBC API

JdbcTemplate
update()
queryForList()


WEB APPLICATION USING SPRING BOOT
==========================================================
1.LOMBOK
2.SPRING WEB====TOMCAT
3.SPRING DEV TOOLS
localhost:1004/show
SPRING+HIBERNATE USING SPRING BOOT
====================================================================================================================
SPRING DATA JPA
===========================================================================
HERE TWO INTERFACES ARE THERE
CrudRepository<T,ID>=======INTERFACE
JpaRepository<T,ID>=======INTERFACE
T==ENTITY CLASS NAME
ID===PRIMARY KEY DATA TYPE
save()
findAll()
findById()
delete()

JpaRepository<T,ID> extends CrudRepository<T,ID>
save()
findAll()
findById()
delete()
DEPENDENCY
================================
1.LOMBOK
2.SPRING DATA JPA
3.MYSQL
================================================
SERVICE CLASS===============COM.ARINDAM.SERVICE
REPOSITORY INTERFACE========COM.ARINDAM.REPOSITORY
ENTITY CLASS=================COM.ARINDAM.ENTITY
MAIN CLASS

DATE:11.07.2024
=========================================================================================

SPRING BOOT
===========================
1.SPRING APPLICATION
2.READING PROPERTIES FILE
3.READ YML FILE
4.BOOT JDBC
5.BOOT WEB
6.SPRING BOOT DATA JPA
============================================================================================
RESTFULL WEBSERVICES
===========================================================================================
WEBSERVICE
============================================================================
IT IS USED TO COMMUNICATE BETWEEN TWO INTER OPERABLE APPLICATION
===========================================================
TYPES OF WEBSERICES
============================================
1.SOAP===SIMPLE ACCESS OBJECT PROTOCOL
========================================================
IT SUPPORT ONLY XML
2.REST==REPRENTATIONAL STATE TRANSFER
========================================
SUPPORT BOTH XML AND JSON
=================================================================================
ACTION BASED URL
=================================================
http://abc.com/?id=1======> query parameter

RESOURCE BASED URL
=============================================
http://abc.com/id=== path parameter
=========================================================================
HTTP METHOD
=====================================================
1.GET===GET THE DATA FROM SERVER
2.POST===POST THE DATA TO THE SERVER
3.PUT====UPDATE DATA INTO THE SERVER
4.DELETE===DELETE DATA FROM THE SERVER
===========================================================================
HTTP STATUS CODE
================================================================
404======NO DATA FOUND
500======INTERNAL SERVER ERROR
200======OK
=================================================================

JSON==JAVA SCRIPT OBJECT NOTATION
============================================================
JSON
================================================
KEY VALUE PAIR
{
   "ID":100,
   "NAME":"AYAN",
   "PHNO":"54544554"



}
REST API TOOL
=============================================================
1.POSTMAN
2.SWAGGER
PROJECT NAME:BOOTRESTAPI
DEPENDENCIES
=======================
1.LOMBOK
2.MYSQL
3.DATA JPA
4.SPRING WEB
5.SPRING BOOT DEV TOOLS
http://localhost:1004/order/add
{
  "oid":"ord1",
  "oqty":2,
  "price":2000.00,
  "cname":"ROBIN"
}


http://localhost:1004/order/add
http://localhost:1004/order/del/ord1
================================================================================================
DATE:12.07.2024
==================================================================================================
FRONT END
===================================================
REACT JS
=============================================================
PREREQUISITE
=================================
HTML
CSS
JAVASCRIPT
=====================================================================
JAVASCRIPT
=======================================================================
JAVASCRIPT IS A PROGRAMMING LANGUAGE BECAUSE IT COMMUNICATE WITH DATABASE AND APPLICATION SERVER
BEFORE 2010 IT WAS CALLED SCRIPTING LANGUAGE
PURPOSE
===========================================
TO DEVELOP DYNAMIC USER INTERFACE
TO PROVIDE VALIDATION BOTH CLIENT SIDE AS WELL AS SERVERSIDE
COMMUNICATE TO FRONDEND AND BACKEND APPLICATION
AREA
======================
1.WEBAPPLICATION
2.MOBILE APPLICATION
3.STAND ALONE APPLICATION
4.ML APP
HOW TO INSTALL
================================
1.NODE JS===JAVASCRIPT RUNTIME ENVIRONMENT
2.IDE===VISUAL STUDIO CODE
VARIABLE
=============================
NAMED STORAGE LOCATION
PRIMITIVE TYPES===number,boolean,string,symbol,null,undefined
NON PRIMITIVE TYPES==object
var,let,cont
var obj1={
    id:1,
    nm:'ROBIN',
    phno:'454554'
}
FUNCTION
==============================
1.NORMAL FUNCTION
2.PARAMETRISED FUNCTION
3.FUNCTION WITH RETURN STATEMENT
4.ANNONYMOUS FUNCTION
5.CALLBACK FUNCTION
6.HIGHER ORDER FUNCTION
7.ARROW FUNCTION
ANNONYMOUS FUNCTION
=================================
FUNCTION WITHOUT NAME
function()
{

}

//NORMAL FUNCTION
function fn1()
{
    console.log("NORMAL FUNCTION");
}
fn1();

C:\FrontEndApplication\js_practical> node .\function.js

//PARAMETERISED FUNCTION
function fn2(x,y)
{
 console.log(x,y);
}
fn2(10,20);
//FUNCTION WITH RETURN STATEMENT
function fn3(x,y)
{
   return(x+y);
}
var res=fn3(10,20);
console.log(res);
//ANNONYMOUS FUNCTION
function fn4(f)
{
 console.log(f);
 f();
}
//CALLING THE FUNCTION
fn4(function(){
var city='KOLKATA';
console.log(city);
}
)
//HIGER ORDER AND CALLBACK FUNCTION
function print()
{
  var state='WB';
  console.log(state);
}

function fn5(f)
{
   console.log(f);
   f();
}
fn5(print);
//FUNCTION EXPRESSION
var result=function(){
console.log("FUNCTION EXPRESSION");
}
result();
ARRAY
=================================================================================
var arr=[100,200,300,400];
console.log(arr);
console.log(typeof arr);

//RANGE OF VALUES IN ARRAY
var newArray=arr.slice(2,4);
console.log(newArray);
FOREACH()===TRAVERSE THE ELEMENT ARRAY
MAP()========TRAVERSE THE ELEMENT IN ARRAY AND DOING SOME OPERATION AND IT WILL RETURN NEW ARRAY
FILTER()

//FOR EACH METHOD
arr.forEach(function(element,index){
    console.log(index,element);
})

//MAP() FUNCTION
var newArray1=arr.map(function(element,index){
    return element*10;
})
console.log(newArray1);


//FILTER() FUNCTION
var newArray2=arr.filter(function(element,index){
    return element>200;
})
console.log(newArray2);

var product={
    pid:'P1',
    pname:'TV',
    pqty:5,
    price:25000.00
}
console.log(product);
console.log(product.pname,product.price);

//ADD A ELEMENT IN OBJECT
product.company='SAMSUNG';
console.log(product);
//UPDATE DATA IN OBJECT
product.price=32000.00;
console.log(product);
//DELETE ELEMENT IN OBJECT
delete product.company;
console.log(product);

//NESTED OBJECT
var employee={
    eid:'E1',
    ename:'AYAN',
    desig:'MANAGER',
    phno:'545445',
    address:{
       plotno:'AD10',
       streetnm:'SALTLAKE CITY',
       pincode:'700091',
       area:{
        ps:'BIDHANNAGAR',
        state:'WB'
       } 
    }
}
console.log(employee);
ename,desig,phno,plotno,pincode,ps
employee.ename,employee.desig,employee.address.plotno,employee.address.pincode,employee.address.area.ps;


//OBJECT WITH FUNCTION
var products={
    pid:'P1',
    pname:'TV',
    pqty:5,
    price:32000.00,
    totalcost:function(){
        console.log(this.price*this.pqty);
    }
}
console.log(products.pname,products.pqty,products.price);
products.totalcost();

============================================================================================
ES6====ECMA SCRIPT.IT IS INTRODUCED IN 2015.LOT OF CHANGES MADE TO THE JAVASCRIPT
=======================================================================================
1.SPREAD OPERATOR
2.REST PARAMATER
3.LET VS VAR VS CONST
4.DESTERUCTURE OF OBJECT
5.ARROW FUNCTION
   ARROW FUNCTION WITH FOREACH LOOP
   ARROW FUNCTION WITH MAP()
   ARROW FUNCTION WITH FILTER()
6.PROMISE OBJECT
================================================================================================
//SPREAD OPRATOR(COPY ONE OBJECT VALUE TO ANOTHER OBJECT AND ALSO MODIFY THE SOURCE OBJECT DATA IN
//NEW OBJECT)
var obj1={
    id:100,
    name:'ROBIN',
    phno:'23333',
    dept:'HR'
}
console.log(obj1);
var obj2={
    ...obj1,
    dept:'FINANCE'
}
console.log(obj2);
//REST PARAMETER
function  fn1(x,y)
{
  console.log(x,y);
}
fn1(10,20);
fn1(10,20,30,40);

function  fn1(x,y,...data)
{
  console.log(x,y);
  console.log(data);
}
fn1(10,20);
fn1(10,20,30,40);
//DESTRUCTING OF OBJECT
var obj1={
  rollno:1,
  sname:'RUPAM',
  phno:'45545',
  dept:'CSE'
}
console.log(obj1);
var{sname,dept}=obj1;
console.log(sname,dept);
================================================================
LET VS VAR VS CONST
====================================================================

//LET VS VAR VS CONST
/*function fn3()
{
  if(true)
  {
    var x=25;
    console.log(x);
  }
  console.log(x);
}*/
=================================
/*function fn3()
{
  if(true)
  {
    let x=25;
    console.log(x);
  }
  console.log(x);
}*/
function fn3()
{
  if(true)
  {
    const x=25;
    console.log(x);
    x=40;
  }
  }

fn3()
=========================================================================
ARROW FUNCTION
=========================================================================

//ARROW Function
function fn5()
{
  console.log("NORMAL FUNCTION");
}
fn5();
const fn6=()=>{
  console.log("ARROW FUNCTION");
}
fn6();
==========================================================================
//ARROW FUNCTION FOR EACH LOOP
var arr=[100,200,300,400,500,600];

arr.forEach(function(element,index){
    console.log(index,element);
})
arr.forEach((element,index)=>{
console.log(index,element);
 })
================================================
ARROW WITH MAP FUNCTION
=================================================
//MAP() FUNCTION
var newArray1=arr.map(function(element,index){
    return element*10;
})
var newArray1=arr.map((element,index)=>{
    return element*10;
})

console.log(newArray1);
//FILTER() FUNCTION
var newArray2=arr.filter((element,index)=>{
    return element>200;
})
console.log(newArray2);
==========================================================================
DOM
============================================================
DOCUMENT OBJECT MODEL
=========================================
HTML DOCUMENT IS CONVERTED INTO OBJECTS CLLED NODES AND IT WILL FORM A TREE LIKE DATA STRUCTURE IS CALLED DOM.
HTML DOCUMENT===BROWSER ENGINE===COMPILE====BYTES===TOKENS===NODES


HOW CAN ACCESS DOM ELEMENT
==================
ID
TAG ATTRIBUTE
CLASS
NAME
<script>
        const changeToH2=()=>{
           var h2Ref=document.getElementById("domh");
           h2Ref.innerText="DOM MANIPULATION BY JAVASCRIPT";
        }
    </script>
<button onclick="changeToH2()">CHANGETOH2</button>&nbsp;&nbsp;

npx create-react-app reactappdemo

C:\FrontEndApplication> cd reactappdemo
C:\FrontEndApplication\reactappdemo>npm start

DATE:13.07.2024
================================================================================================
REACT JS
===================================================================================
REACT IS A JAVASCRIPT LIBRARY.JAVASCRIPT LIBRARY IS A COLLECTION CLASSES AND FUNCTIONS
PURPOSE
=====================================
TO CREATE USER INTERFACE
REACT+OTHER LIBRARIES====FRONT END APPLICATION
======================================================================
JAVASCRIPT
============================================================
var btnRef=document.createElement("button");
btnRef.innerText="CLICKED";
document.elementById("root").appendChild(btnRef);
==============================================================
REACT
=========================================
React.createElement("button",null,"CLICKED");=====TERMED AS REACT ELEMENT
===     ============
LIBRARY  FUNCTION
ReactDOM.render(document.getElementByID("root"));
REACT ELEMENT====REACTDOM====DOM
JSX====99% SIMILAR TO HTML
=======================================
JSX====COMPILE===BABEL===REACT ELEMENT====REACT DOM=====DOM


REACT APPLICATION
============================================
WITHOUT CRA TOOL
WITH CRA TOOL
================================================================================
REACT COMPONENT
==============================
TWO TYPES
==============================
CLASS COMPONENT
FUNCTIONAL COMPONENT
RULES
==========================
JSX SHOULD BE WRITTEN WITHIN THE JAVASCRIPT FUNCTION
FUNCTIONAL COMPONENT RULES
================================
IT IS A JAVASCRIPT FUNCTION  STARTED WITH CAPITAL LETTER
EX:CreateUi()
CRA
==============================
CREATE REACT APP
IT CAN BE INSTALLED TWO WAYS
====================================
npm create-react-app=====INSTALL THE CRA TOOL
npx  create-react-app=====RUN CRA TOOL
===========================================================================
SINGLE PAGE APPLICATION
REACT HOOK
====================================================================================
REACT HOOK IS A JAVASCRIPT FUNCTION WHICH IS USED FOR SPECIAL PURPOSES
REACT HOOK START use<name>
EX:
USESTATE
USEEFFECT
USEREF
USECALLBACK
USECONTEXT
USESTATE
=======================================================
usestate()===RETURN variable,function
RULES OF THE REACT HOOK
============================
IT IS TO BE CREATED WITH IN FUNCTIONAL COMPONENT
HOOK SHOULD BE DECLARED AT THE TOP FUNCTIONAL COMPONENT
HOOK NEVER BEEN CALLED WITHIN JSX

PROPS
===============================================================



























